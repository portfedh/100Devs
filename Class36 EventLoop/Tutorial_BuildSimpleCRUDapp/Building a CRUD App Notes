15 - 27 Aug 2023

Title:
    Building a Simple CRUD app with Node, Express, and MongoDB

Link:
    https://zellwk.com/blog/crud-express-mongodb/#convertkit

Extras

    Mongoose tutorial:
        https://zellwk.com/blog/mongoose/

    Template engines:
        https://zellwk.com/blog/nunjucks-with-gulp/

    Fetch API explanation:
        https://css-tricks.com/using-fetch/

Notes:
******

    Definitions:

        Express: framework to build webapps on top of NodeJs

        MongoDB: is a database.

        CRUD

            Create (POST)

            Read (GET)

            Update (PUT)

            Delete (DELETE)

    Objective:

        Build a simple application that lets you track a list of quotes from Star Wars Characters.

    Prerequisites:

        NodeJs need to be previously installed.

        $ node -v  # To check


    Common project commands:

        $ node server.js // Run server file. 

SETUP
*****

    Navigate to project folder

    Start git and create a .gitignore file:

        $ git init

        $ touch .gitignore

        // Inside .gitignore file:

            /node_modules 

    Create package.json:
        
        $ npm init

        If package.json already exists use:

            $ npm install

    Create server file:

        $ touch server.js

        // Inside server.js

            console.log('server.js now starting...')

    Run server file:

        $ node server

        $ Crl + C  // To exit

    Install Express:

        $ npm install express --save

            // --save: saves it as a dependency in package.json

    Install Nodemon:

        $ npm install nodemon --save-dev

            // --save-dev: Saves as dev dependency in package.json

        Modify 'package.json' to run it with a command:

            // Inside 'package.json':
                {
                  // ...
                  "scripts": {
                    "dev": "nodemon server.js"
                  }
                  // ...
                }

        Run nodemon:

            $ npm run dev

            Now server will refresh automatically


    Install body-parser:

        Express can tead data from Forms.

        We use body-parser middleware for that.

        $ npm install body-parser --save


    Install EJS (Template engine):

            $ npm install ejs --save

Database Setup
**************

    Install Mongo DB:

        $ npm install mongodb --save

    Connect to MongoDB Atlas

        https://www.mongodb.com/atlas/database

        Create an organization

        Create an account

        Create a project

        Create a cluster

        Whitelist your current IP address

        Create a new user

            user: Yoda
            pass: oNEn6lWuO2ADugjM

        Add permissions to new user:

            DatabaseAccess / Edit / --> readWriteAnyDatabase

        Get connection information:

            DataServices/Connect/Drivers
                mongodb+srv://<username>:<password>@cluster0.tbcbcmb.mongodb.net/?retryWrites=true&w=majority

            With credentials:
                mongodb+srv://Yoda:oNEn6lWuO2ADugjM@cluster0.tbcbcmb.mongodb.net/?retryWrites=true&w=majority

            Save as variable:
                let connectionString = ...


        Connect with a Promise

            const MongoClient = require('mongodb').MongoClient

            MongoClient.connect(connectionString, { useUnifiedTopology: true })
              .then(client => {
                console.log('Connected to Database')
                const db = client.db('db-name')
                const quotesCollection = db.collection('quotes')
                app.use(/* ... */)
                app.get(/* ... */)
                app.post(/* ... */)
                app.listen(/* ... */)
              })
              .catch(error => console.error(error))


        Check the Database:

            Go to: Database / Browse Collections

                Database: Database name 'star-wars-quotes'
                Collection: Library 'quotes'
                Each object is named a document. 


CREATE SERVER FILE
******************

    Import express in server.js:

        const express = require('express')
        const app = express()

    Add body-parser:
        // Place  before your CRUD handlers
        app.use(bodyParser.urlencoded({ extended: true }))
                const bodyParser = require('body-parser')

    Add the port people will connect to:

        app.listen(3000, function () {
          console.log('listening on 3000')
        })

            // At this point if you try to connect
            // You will get this message.
            // 'cannot get /'
            // We need to add handlers for that.

    Adding Handlers:

        Handlers follow this structure:

            app.get(endpoint, callback)    (Read)
            app.post(endpoint, callback)   (Write)
            app.put(endpoint, callback)    (Update)
            app.delete(endpoint, callback) (Delete)

        Callback is always a function with two arguments:
        
            Request object
            Reponse object

        The code will look like this:

            Arrow version:
                app.get('/', (request, response) => {
                  /* Some code here */
                })
        
            Function version:
                app.get('/', function (request, response){
                  /* Some code here */
                })

        Examples of responses:

            response.send('Hello World')
            response.sendFile(__dirname + '/index.html')



CRUD - CREATE 
**************

    Browsers CREATE with a POST request to the server.

    The POST request can be triggered through JavaScript or through a <form> element.


    Option 1: Form Element:

        Add a form element with attributes:

            - 'action': Where to send request
            - 'method': Post request
            - 'name': id for that form element

            <form action="/quotes" method="POST">
              <input type="text" placeholder="name" name="name" />
              <input type="text" placeholder="quote" name="quote" />
              <button type="submit">Submit</button>
            </form>

        To handle the form element use:

            const bodyParser = require('body-parser')

            app.use(bodyParser.urlencoded({ extended: true }))

            app.post('/quotes', (req, res) => {
              ... code here ...
            })

        The urlencoded method extracts data from the form element and saves it to req.body. 


CRUD - READ
*************

    Extracting the quotes from the DB:

        To get info from MongoDB we can use the find method:

            app.get('/', (req, res) => {
              db.collection('quotes')
                .find()
                .toArray()
                .then(results => {
                  console.log(results)
                })
                .catch(error => console.error(error))
            })

    Rendering the HTML:

        There's no way to add dynamic content to html server side. 

        We use a template engine instead to generate html. 

        Popular template engines:

            - Pug
            - Nunjucks
            - Embedded JavaScript (EJS)


        We wil use EJS because its the simplest


        Use this code to tell Express this is the template engine. 

            app.set('view engine', 'ejs')

            // Add code after imports & before other app methods


        Create folder where rendered files will reside

            $ mkdir mkdir views
            
            $ touch views/index.ejs

        Copy the contents of index.html to index.ejs

        Add the following code to add a for loop that will print all db elements

            <h2>Quotes</h2>

            <ul class="quotes">
              <!-- Loop through quotes -->
              <% for(var i = 0; i < quotes.length; i++) {%>
              <li class="quote">
                <!-- Output name from the iterated quote object -->
                <span><%= quotes[i].name %></span>:
                <!-- Output quote from the iterated quote object -->
                <span><%= quotes[i].quote %></span>
              </li>
              <% } %>
            </ul>

CRUD - UPDATE
*************

    You can update using form elments or JavaScript

    We have already shown how to do it using form elments

    We will now try it with JavaScript. 



    Create an update button that replaces a quote:

        Add the html in index.ejs:

            <div>
            <h2>Darth Vader invades!</h2>
            <p>Replace first Yoda's quote with a quote written by
            Darth Vader</p>
            <button id="update-button">Replace Yoda's quote</button>
            </div>
            <script src="/main.js"></script>


        Create an external JavaScript file to execute a put request. 

        Store it in a folder called public

            $ mkdir public
                
            $ touch public/main.js

        In the server file, add code to make the public folder accesible to the public:

            app.use(express.static('public'))

        In main.js add an event listener to execute when a button is clicked:

            const update = document.querySelector('#update-button')
            
            update.addEventListener('click', _ => {
              fetch('/quotes', {
                method: 'put',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  name: 'Darth Vader',
                  quote: 'I find your lack of faith disturbing.'
                })
              })
                .then(res => {
                  if (res.ok) return res.json()
                })
                .then(response => {
                  window.location.reload(true)
                })
            })

            // In more complicated code we update instead of reloading the page.


        In server.js add the code to listen to the update request and write it in the database:

            app.put('/quotes', (req, res) => {
              quotesCollection.findOneAndUpdate(
                { name: 'Yoda' },
                {
                  $set: {
                    name: req.body.name,
                    quote: req.body.quote,
                  },
                },
                {
                  upsert: true,
                })
              .then(result => {
                res.json('Success')
               })
              .catch(error => console.error(error))
            })

        This process can be made simpler using mongoose. 

CRUD - DELETE
*************


    Add an HTML button to index.ejs:

        <section data-position="delete-quote">
          <div>
            <h2>Remove Darth Vader!</h2>
            <p>
              Delete one Darth Vader's quote. Does nothing if there are no more
              Darth Vader's quote
            </p>
            <button id="delete-button">Delete Darth Vader's quote</button>
          </div>
          <div id="message"></div>
        </section>

    In main.js add an event listener, a fetch request, and an if statment in case the quote has already been deleted:

        deleteButton.addEventListener('click', _ => {
          fetch('/quotes', {
            method: 'delete',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              name: 'Darth Vader'
            })
          })
            .then(res => {
              if (res.ok) return res.json()
            })
            .then(response => {
              if (response === 'No quote to delete') {
                messageDiv.textContent = 'No Darth Vader quote to delete'
              } else {
                window.location.reload(true)
              }
            })
            .catch(console.error)
        })


    In server.js add a method to handle the delete the quote:

        app.delete('/quotes', (req, res) => {
          quotesCollection
          .deleteOne({ name: req.body.name })
          .then(result => {
            if (result.deletedCount === 0) {
              return res.json('No quote to delete')
            }
            res.json(`Deleted Darth Vader's quote`)
          })
          .catch(error => console.error(error))
        })
