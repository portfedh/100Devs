DataStructures & Algorithms

Date:
27 Nov 2023

Url:
https://frontendmasters.com/courses/algorithms/introduction/

Notes:


Arrays are the simplest data structure

Big O
    Way to categorize time or memory as input grows.

    Helps us make decision what data structures to use

    We drop the constants O(n) == O(1) == O(2)


Arrays

    Blocking contiguous space.

    Example 

    Create an array of 3 bites:

        a = int[3]

    a[0]

        Go to the memory address of A

        Add in the offset of 0 multiplied by how big my type is (in this case 3)

    Arrays cant be empty

        You can fill them with a symbol

        What if you want to use that symbol

        Thats how 'null' was invented


    Has O(1)

        No matter how big the index is, it takes the same amount of time. 


    insertAt, push(), pop()

        Built on top of this

        Where it is, how many boxes it has, unit size per box in bits.


Search

    Linear search

        IndexOf --> Linear search

            Simplest form of search

            O(n)


Search in sorted arrays

    Binary search

        Always asked at google interviews

        Learn to code this

        [low, high)

            low is inclusive
            
            high is exclusive

        find midpoint (high - low)/2

        Find value at midpoint

        Check conditions

            Value = midpoint --> return index

            Value > midpoint --> low == midpoint +1

            Value < midpoint --> high == midpoint

            If low > high --> return 'not found'

    Two crystal balls problem

        Use sqrt of n instead of binary search

Bubble sort
    
    Check every number in an array against the next value. 

    If the value is bigger, swap values

    Uses double for loop. Easy to code. 

Linked list

    constant time

    Node <t>

    value = node t

    next.value? = node x

    prev.value? = node y

    O(n)
        Insertion
        Deletion
        Head/tail
        prepend/append

Que

    Its an implementation of a linked list

    Single list


Arrays

    Push are immediate because they add to the end

    Shift needs to move the whole array O(n)

    Knowing the array size is best

Empirical Testing for O Notation

    Push/Pop (from the end)

    Shift/unshift (from the beggining)

    Search a value based on index

    Run for loop with n values 10, 100, 1000, 10000, 100000, 1000000

    Check how the execution time changes

    
Recursion

    Have a clear base case

    Then recurse and change parameter until you reach it

