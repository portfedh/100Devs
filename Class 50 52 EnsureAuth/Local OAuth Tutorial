Passport.js Tutorial
===================

Goal: 

    Authentication with Local OAuth
    Uses NodeJs, Express, EJS, and SQLite


Date taken: 
    
    12 Oct 2023


Setup
=====

    Url: 

        https://www.passportjs.org/tutorials/password/


    Materials with finished result:

        https://github.com/passport/todos-express-password


    Materials with starter code:

        https://github.com/passport/todos-express-starter.git


    Install dependencies:

        $ npm install


Create a sign-in page
=====================

    Add authentication-related routes:

        $ touch routes/auth.js

        // Code inside auth.js

        var express = require('express');

        var router = express.Router();

        router.get('/login', function(req, res, next) {
          res.render('login');
        });

        module.exports = router;


    Add the route to the server file:

        // Code inside app.js (in 100devs we call it server.js)

        // Imports
        var indexRouter = require('./routes/index');
        var authRouter = require('./routes/auth');

        // Route handlers
        app.use('/', indexRouter);
        app.use('/', authRouter);


    Add a button to views/login.ejs page:

        <h1>Sign in</h1>
        <a class="button google" href="/login/federated/google">Sign in with Google</a>


Add route to redirect to Google when button is clicked
======================================================

    Install passport.js dependencies
        $ npm install passport
        $ npm install passport-google-oidc

    Inside routes/auth.js import packages and database config

        var express = require('express');
        var passport = require('passport');
        var GoogleStrategy = require('passport-google-oidc');
        var db = require('../db')

    Inside routes/auth.js add route to redirect when 'Sign in with Google' is clicked 

        router.get('/login/federated/google', passport.authenticate('google'));


Register the App with Google
============================

    Register the app with Google so that it can make use of Google's APIs.


    Go to Google Platform Console

        https://console.cloud.google.com/


    Select a project or create a new one.


    Navigate to the API & Services Overview page and select: Credentials


    Select a project or create a new one:


    Click: + Create Credentials

        Select: OAuth client ID
        Select: Web Aplication as Aplication type
        Select: Authorized redirect URIs to: http://localhost:3000/oauth2/redirect/google
        // This will change in a real project


    Set the OAuth Consent screens by adding 

        App name
        User support email
        Logo
        App domain
        User type (Select: External)


    Copy the provided credentials:

        ClientID
            100959252338-l901jjmn86rb6cbgbcslshh9tbki8pgo.apps.googleusercontent.com

        ClientSecret
            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


Configure the Strategy
======================

    Configure passport with your API information. 


    Create enviroment file

        $ touch .env

        // Inside .env file
        GOOGLE_CLIENT_ID=__INSERT_CLIENT_ID_HERE__
        GOOGLE_CLIENT_SECRET=__INSERT_CLIENT_SECRET_HERE__


    Add the strategy to routes/auth.js

        passport.use(new GoogleStrategy({
          clientID: process.env['GOOGLE_CLIENT_ID'],
          clientSecret: process.env['GOOGLE_CLIENT_SECRET'],
          callbackURL: '/oauth2/redirect/google',
          scope: [ 'profile' ]
        }, function verify(issuer, profile, cb) {
          db.get('SELECT * FROM federated_credentials WHERE provider = ? AND subject = ?', [
            issuer,
            profile.id
          ], function(err, row) {
            if (err) { return cb(err); }
            if (!row) {
              db.run('INSERT INTO users (name) VALUES (?)', [
                profile.displayName
              ], function(err) {
                if (err) { return cb(err); }

                var id = this.lastID;
                db.run('INSERT INTO federated_credentials (user_id, provider, subject) VALUES (?, ?, ?)', [
                  id,
                  issuer,
                  profile.id
                ], function(err) {
                  if (err) { return cb(err); }
                  var user = {
                    id: id,
                    name: profile.displayName
                  };
                  return cb(null, user);
                });
              });
            } else {
              db.get('SELECT * FROM users WHERE id = ?', [ row.user_id ], function(err, row) {
                if (err) { return cb(err); }
                if (!row) { return cb(null, false); }
                return cb(null, row);
              });
            }
          });
        }));


Maintain state when redirecting to Google
=========================================

When a user signs in to the app with Google, they are redirected to Google.
Google authenticates the user and then redirects them to the app.
For security reasons, it is important that state is maintained and validated between these two redirects.


    Install session store as dependencies

        $ npm install express-session
        $ npm install connect-sqlite3


    In app.js import the modules

        var logger = require('morgan');
        var session = require('express-session');
        var SQLiteStore = require('connect-sqlite3')(session);


    Then use the code in app.js

        app.use(express.static(path.join(__dirname, 'public')));
        app.use(session({
          secret: 'keyboard cat',
          resave: false,
          saveUninitialized: false,
          store: new SQLiteStore({ db: 'sessions.db', dir: './var/db' })
        }));


Redirect from Google the app
============================

Add a route that authenticates the user when Google redirects them back to the app.


    Add the following to routes/auth.js

        router.get('/oauth2/redirect/google', passport.authenticate('google', {
          successRedirect: '/',
          failureRedirect: '/login'
        }));


Establish Session
=================

Establish a login session to maintain the user's authenticated state as they navigate the app.

    Add the following to app.js

        Import session managment

            var session = require('express-session');

            var passport = require('passport');

        Add the code

            app.use(session({
              secret: 'keyboard cat',
              resave: false,
              saveUninitialized: false,
              store: new SQLiteStore({ db: 'sessions.db', dir: './var/db' })
            }));
            app.use(passport.authenticate('session')); 

    Add the following to routes/auth.js

        passport.serializeUser(function(user, cb) {
          process.nextTick(function() {
            cb(null, { id: user.id, username: user.username, name: user.name });
          });
        });

        passport.deserializeUser(function(user, cb) {
          process.nextTick(function() {
            return cb(null, user);
          });
        });


Add Logout
==========

How to terminate a session.

    Add the following to routes/auth.js

        router.post('/logout', function(req, res, next) {
          req.logout(function(err) {
            if (err) { return next(err); }
            res.redirect('/');
          });
        });
