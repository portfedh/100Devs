Passport.js Tutorial
===================

Goal: 

    Authentication with Local OAuth
    Uses NodeJs, Express, EJS, and SQLite


Date taken: 
    
    12 Oct 2023


Setup
=====

    Url: 

        https://www.passportjs.org/tutorials/password/


    Materials with finished result:

        https://github.com/passport/todos-express-password


    Materials with starter code:

        https://github.com/passport/todos-express-starter.git


    Install dependencies:

        $ npm install


Create a sign-in page
=====================

    // Code is the same as google tutorial

    Add authentication-related routes:

        $ touch routes/auth.js

        // Code inside auth.js

        var express = require('express');

        var router = express.Router();

        router.get('/login', function(req, res, next) {
          res.render('login');
        });

        module.exports = router;


    Add the route to the server file:

        // Code inside app.js 
        // In 100devs we call it server.js

        // Imports
        var indexRouter = require('./routes/index');
        var authRouter = require('./routes/auth');

        // Route handlers
        app.use('/', indexRouter);
        app.use('/', authRouter);


    Add a login in form to views/login.ejs page:

        <h1>Sign in</h1>
        <form action="/login/password" method="post">
            <section>
                <label for="username">Username</label>
                <input id="username" name="username" type="text" autocomplete="username" required autofocus>
            </section>
            <section>
                <label for="current-password">Password</label>
                <input id="current-password" name="password" type="password" autocomplete="current-password" required>
            </section>
            <button type="submit">Sign in</button>
        </form>


Verify Password
===============

    Install passport.js dependencies

        $ npm install passport
        $ npm install passport-local


    Configure routes/auth.js  to import packages

        var express = require('express');
        var passport = require('passport');
        var LocalStrategy = require('passport-local');
        var crypto = require('crypto');
        var db = require('../db')


    In the same file, configure the logal strategy

        passport.use(new LocalStrategy(function verify(username, password, cb) {
          db.get('SELECT * FROM users WHERE username = ?', [ username ], function(err, row) {
            if (err) { return cb(err); }
            if (!row) { return cb(null, false, { message: 'Incorrect username or password.' }); }

            crypto.pbkdf2(password, row.salt, 310000, 32, 'sha256', function(err, hashedPassword) {
              if (err) { return cb(err); }
              if (!crypto.timingSafeEqual(row.hashed_password, hashedPassword)) {
                return cb(null, false, { message: 'Incorrect username or password.' });
              }
              return cb(null, row);
            });
          });
        }));

    In the same file, add a route to authenticate user

        router.post('/login/password', passport.authenticate('local', {
          successRedirect: '/',
          failureRedirect: '/login'
        }));


Establish Session
=================

Establish a login session establish a login session which will maintain the user's authenticated state as they navigate the app.

    Install the following: 

        $ npm install express-session

        $ npm install connect-sqlite3


    Add the following to app.js

        Import session managment

            var session = require('express-session');

            var passport = require('passport');

            var logger = require('morgan');

            var SQLiteStore = require('connect-sqlite3')(session);

        Add the code

            app.use(express.static(path.join(__dirname, 'public')));
            app.use(session({
              secret: 'keyboard cat',
              resave: false,
              saveUninitialized: false,
              store: new SQLiteStore({ db: 'sessions.db', dir: './var/db' })
            }));
            app.use(passport.authenticate('session'));

    Configure Passport to persist user info in login session
    Add the following to routes/auth.js


        passport.serializeUser(function(user, cb) {
          process.nextTick(function() {
            cb(null, { id: user.id, username: user.username, name: user.name });
          });
        });

        passport.deserializeUser(function(user, cb) {
          process.nextTick(function() {
            return cb(null, user);
          });
        });


Add Logout
==========

How to terminate a session.

    Add the following to routes/auth.js

        router.post('/logout', function(req, res, next) {
          req.logout(function(err) {
            if (err) { return next(err); }
            res.redirect('/');
          });
        });


Add Sign-UP Page
================

    Go to routes/auth.js and add the following route 

        router.get('/signup', function(req, res, next) {
          res.render('signup');
        });

    Then add this to handle form submissions:

        router.post('/signup', function(req, res, next) {
          var salt = crypto.randomBytes(16);
          crypto.pbkdf2(req.body.password, salt, 310000, 32, 'sha256', function(err, hashedPassword) {
            if (err) { return next(err); }
            db.run('INSERT INTO users (username, hashed_password, salt) VALUES (?, ?, ?)', [
              req.body.username,
              hashedPassword,
              salt
            ], function(err) {
              if (err) { return next(err); }
              var user = {
                id: this.lastID,
                username: req.body.username
              };
              req.login(user, function(err) {
                if (err) { return next(err); }
                res.redirect('/');
              });
            });
          });
        });

    Open views/signup.ejs and add the following:

        <h1>Sign up</h1>
        <form action="/signup" method="post">
            <section>
                <label for="username">Username</label>
                <input id="username" name="username" type="text" autocomplete="username" required>
            </section>
            <section>
                <label for="new-password">Password</label>
                <input id="new-password" name="password" type="password" autocomplete="new-password" required>
            </section>
            <button type="submit">Sign up</button>
        </form>

    This route creates a new user record in the app's database, storing the username and hashed password. Once the record is created, the user is logged in.
