
100Devs JavaScript Notes
------------------------

** Review closures 


Print to console:

    console.log("Hello from JavaScript!");

        "This is\na multiline string".


Alert in window:

    alert("Hello from JavaScript!");

        Stops program execution.



Print data type

    let newVariable = 'Playing around with typeof.';

    console.log(typeof newVariable);



Comments:

    /* Multi Line Comment */

    // A one line comment



Declare variables (use camelCase):

    let x = 10; (Block scope, )

    var x = 10;

    const x = 10; (Block scope)

        // Const needs to be declared with a value at start



Block code:

    Part of a program delimited by {}

    Example:

        let num1 = 0;
        {
          num1 = 1; // OK : num1 is declared in the parent block
          const num2 = 0;
        }
        console.log(num1); // OK : num1 is declared in the current block
        console.log(num2); // Error! num2 is not visible here


        Increment a variable (two ways)

            x += 1;

            x++;


Type conversion:

    let x = Number("5");

    let x = String("5");


Arithmetic

    let x = 10;

    x = x + 5;  // Alternative 1
        x == 15

    x += 5;  // Alternative 2
        x == 15

    x++;  // Only increases or decreases count by 1
        x == 11

    // Same with other arithmetic opperators ( -, *, /)



String concatenation:

    let name = 'Leon';

    console.log('My fiend's name is: ' + name);



String interpolation

    // Alternative way of string concatenation
    // Uses backticks

    let myName = 'Pablo';
    let myCity = 'London';

    console.log(`My name is ${myName}. My favorite city is ${myCity}.`)



Optional chaining
    The optional chaining ?. 
    stops the evaluation if the value before ?. is undefined or null and returns undefined.




Get input from user:

    const name = prompt("Enter your first name:");



If Statement:

    if (condition a) {

      // Code to run when the condition a is met

    } else if (condition b){

      // Code to run when the condition b is met

    } else {

      // Code to run when the conditions are false

    }


If statement with AND / OR / NOT operator

    if ( conditionA && conditionB) {

      // Code to run when conditions are is met

      // || for OR conditional

      // !conditionA for NOT

    }



Ternary Operator

    condition ? expressionIfTrue : expressionIfFalse

    let x = 10;

    let y = x > 5 ? y = "greater than 5" :  y = "less than or equal to 5";

    console.log(y);




Switch Statement:

    Only relevant code gets executed

    Same as if statement

    Example:

        const weather = prompt("Question Here");

        switch (weather) {

          case "sunny":

            console.log("Weather is sunny");

            break;

          case "windy":

            console.log("Weather is windy");

          default:

            console.log("Invlid answer");
        }


While Loop:

    let number = 1;
    while (number <= 5) {
      console.log(number);
      number++;
    }



For loop:

    let number;
    for (number = 1; number <= 5; number++) {
      console.log(number);
    }

    for (initialization; condition; final expression) {
      // code to run while the condition is true
    }



.forEach():

    Will execute the same code for each element in an array. 

    Example:
        const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

        fruits.forEach(
          x => console.log(`I want to eat a ${x}`)
          )



.map()

  Takes an argument of a function and returns a new array.

  Example:

    const numbers = [1, 2, 3, 4, 5]; 
     
    const bigNumbers = numbers.map(number => {
      return number * 10;
    });

    console.log(numbers); 
    // Output: [1, 2, 3, 4, 5]

    console.log(bigNumbers); 
    // Output: [10, 20, 30, 40, 50]



.filter()

  Takes an argument of a function and returns a new array with filtered elements.

  The filter criteria should return true or false to work


  Example:
  
    const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; 
     
    const shortWords = words.filter(word => {
      return word.length < 6;
    });

    console.log(words); 
    // Output: ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; 

    console.log(shortWords); 
    // Output: ['chair', 'music', 'brick', 'pen', 'door']



.findIndex()

  Finds the location of an element in an array

  will return the index of the first element that evaluates to true in the callback function. 


  If there isn’t a single element in the array that satisfies the condition in the callback, then .findIndex() will return -1


  Example:

    const jumbledNums = [123, 25, 78, 5, 9]; 
     
    const lessThanTen = jumbledNums.findIndex(num => {
      return num < 10;
    });

    console.log(lessThanTen); 
    // Output: 3 

    console.log(jumbledNums[3]); 
    // Output: 5



.reduce()

  Returns a single value after iterating through the elements of an array

  Takes two parametes, accumulator and iterator

  Default is position 0 and 1 in array

  You can change the initial value of accumulator as a second parameter.


  Example:

    const numbers = [1, 2, 4, 10];
     
    const summedNums = numbers.reduce((accumulator, currentValue) => {
      return accumulator + currentValue
    })
     
    console.log(summedNums) 
    // Output: 17


Functions:
    
    function sayHello(name) {

      return "Hello" + name;

    }
    const hello = sayHello();

    console.log(hello);



Anonymous functions (TODO)

    const hello = function(name) {

      const message = `Hello, ${name}!`;

      return message;

    };

    const myFunc = function(param1, param2, ...) {

      // Statements using param1, param2, ...

    };



Arrow functions (TODO)

    Arrow functions have an implicit return

    const hello = (name) => {

      const message = `Hello, ${name}!`;

      return message;

    };

    const myFunc = (param1, param2, ...) => {

        // Statements using param1, param2, ...
    };


Objects

    const pen = {
      type: "ballpoint",
      color: "blue",
      brand: "Bic",
    };

    properties: type, color, brand
    value: ballpoint, blue, Bic

    console.log(pen.type);  // "ballpoint"
    console.log(`I write with a ${pen.color} ${pen.brand} ${pen.type} pen`);

    Memory in variable are copies

        let message = "Hello!";
        let phrase = message;
            // Two variables, each has an independent copy of "Hello!"

    Memory in objects are rerferences

        let user = { name: "John" };

        let admin = user;
            // copy the reference
            // Making changes in one, changes the other

        To copy an object we should use either
            object.asign
            structuredClone

    Setters and getters can change object properties from the outside



Access an object
    console.log(pen.color)
    console.log(pen[color])



Modify objects

    pen.color = "red";



Delete object property

    delete pen.type;



Add new information to object

    pen.price = "2.5";  // price was added to object

Example 1: Object + function

    const aurora = {
      name: "Aurora",
      health: 150,
      strength: 25
    };

    function describe(character) {
      return `${character.name} has ${character.health} health points and ${character.strength} as strength`;
    }

    console.log(describe(aurora));

    // Aurora is harmed by an arrow
    aurora.health -= 20;

    // Aurora equips a strength necklace
    aurora.strength += 10;

    console.log(describe(aurora));


Example 2: Object + method

    const aurora = {
      name: "Aurora",
      health: 150,
      strength: 25

      describe() {
      return `${this.name} has ${this.health} health points and ${this.strength} as strength`;
      }
    };



New object constructor sintax:

        class MakeCar{
          constructor(carMake,carModel,carColor,numOfDoors){
            this.make = carMake
            this.model = carModel
            this.color = carColor
            this.doors = numOfDoors
          }
          honk(){
            alert('BEEP BEEP FUCKER')
          }
          lock(){
            alert(`Locked ${this.doors} doors!`)
          }
        }

        let hondaCivic = new MakeCar('Honda','Civic','Silver', 4)

        let teslaRoadster = new MakeCar('Tesla','Roadster', 'Red', 2)


Array Methods

    arr.push(...items) – adds items to the end,

    arr.pop() – extracts an item from the end,
    
    arr.shift() – extracts an item from the beginning,
    
    arr.unshift(...items) – adds items to the beginning.

    arr.slice([start], [end]) - new array from another array

    arr.concat(arg1, arg2...) -  new arrays from two arrays

    arr.splice - complex tool:

        Remove elements

            arr.splice(1, 1); // from index 1 remove 1 element (list shortens)

        Replace elements

            let arr = ["I", "study", "JavaScript", "right", "now"];

            // remove 3 first elements and replace them with another
            arr.splice(0, 3, "Let's", "dance");

            alert( arr ) // now ["Let's", "dance", "right", "now"]

        Make variable with removed elements

            let arr = ["I", "study", "JavaScript", "right", "now"];

                // remove 2 first elements
                let removed = arr.splice(0, 2);

                alert( removed ); // "I", "study" <-- array of removed myElements  

        Insert withour removals

            let arr = ["I", "study", "JavaScript"];

            // from index 2
            // delete 0
            // then insert "complex" and "language"
            arr.splice(2, 0, "complex", "language");

            alert( arr ); // "I", "study", "complex", "language", "JavaScript"

    For each: 

        arr.forEach(function(item, index, array) {
          // ... do something with item
        });
            Examples:

                ["Bilbo", "Gandalf", "Nazgul"].forEach(alert);

                ["Bilbo", "Gandalf", "Nazgul"].forEach((item, index, array) => {
                  alert(`${item} is at index ${index} in ${array}`);
                });


    Search in array

        arr.indexOf(item, from) – looks for item and returns the index where it was found.

        arr.lastIndexOf - same as indexOf, but looks for from right to left.


Things used in web pages
========================


Search for an element by it's id and execute function when clicked:

    document.getElementById('purple').onclick = purpleFunction



Search for an element by it's id and execute function when clicked:

    document.querySelector('#submit').addEventListener('click', runFunction)



Search for an element by it's class and execute function when clicked:

    const myElements = document.querySelectorAll('.myClass');

    myElements.forEach(element => {element.addEventListener('click', runFunction);});



Hide the id selected (delete it from the DOM):

    document.querySelector('#claire').style.display = 'none';



Read the current value of id and assign it to a variable:

    const goal = document.querySelector('#myGoal').value;



Write text in element by it's id. (Two alternative ways):

    document.querySelector('#goalOutput').innerText = intro + ' ' + goal;

    document.querySelector('#goalOutput').innerText = `${intro} ${goal}`



Change the body background color and the text color:

    document.querySelector('body').style.backgroundColor = 'rgba(0,253,81,1)'
    
    document.querySelector('body').style.color = 'white'



Change the image in the DOM:

    document.querySelector('#IdHere').setAttribute("src", 'photo.jpg');



Get text and then pass it to a voice synthesizer:

  document.querySelector('#placeToYell').innerText = yellText

  let yellThis = new SpeechSynthesisUtterance(yellText);

  synth.speak(yellThis);



API call templates:

    // Example 1

    fetch("https://dog.ceo/api/breeds/image/random")
    .then(res => res.json()) // parse response as JSON
    .then(data => {
      console.log(data)
    })
    .catch(err => {
        console.log(`error ${err}`)
    });


    // Example 2

    fetch(url)
        .then(res => res.json()) // parse response as JSON
        .then(data => {
          console.log(data)
        })
        .catch(err => {
            console.log(`error ${err}`)
        });

    Query parameters are needed to fetch data:
        const url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=margarita'

    Use postman

        You can call an API with no other code



Session sorage:
    
    Persists as long as you dont close browser



Local storage:

    Data persists across user sessions

        Stores data as strings

            You have to transform objects and arrays to strings to save them

            Use JSON.stringify() and JSON.parse()

        Across page refreshes

        Across clossing browsers

        Without using a database

        Stored specific by OS and by browser

    Add data to local storage:

        localStorage.setItem('key', 'value')
        localStorage.setItem('key', 'new value')

    Read data from local storage:

        localStorage.getItem('key')

    Remove item fom local storage:

        localStorage.removeItem('key', 'value')

    Remove all local storage:
    
        localStorage.clear()
