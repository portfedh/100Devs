
Git from the bottom up
----------------------

Site with original text
    https://jwiegley.github.io/git-from-the-bottom-up/

Date
    19 April 2023

Introduction
    
    Terms:

        Repository: Collection of commits with branches, commits and a HEAD element. 

        Index: Staging area. Intermediate step before commiting. 

        Tree: A directory in the git repository. 

        Commit: Snapshot of the repository at one point in time.

        Blob: Represents the contents of a file.

        Branch: Name for a commit. 

        Tag: Label attached to a commit.

        Master/main: Default name of main branch. 

    Checking earlier commits:

        $ git-checkout

Git Repository

    Mirrors linux filesystem

    Directories with files with data

    Meta-data stored in:

        Directory names

        i-nodes (files pointing to a file identifying its unique number with size, type, permission)

    Git represents data in blobs.

        Leaf nodes inside a tree

        Blob is identified by computing a SHA1 of its contents

            Verifies content has not changed

            Creates a unique name

            Stores no data about its contents

Introducing the Blob

    Commands

        $ mkdir sample; cd sample

        $ echo 'Hello, world!' > greeting

        $ git hash-object greeting

            # af5626b4a114abcb82d63db7c8082c3c4756e51b

        $ git init

        $ git add greeting
        
        $ git commit -m "Added my greeting"

        $ git cat-file -t af5626b

            # Will output the type of object

            # blob

        $ git cat-file blob af5626b
        
            # Hello, world!

    Explanations

        Create directory and file.

        Check the hash-id git is going to use for 'greeting' file.

        Create new repository and commit greeting file to it. 

        We can find our file & output its content with its hash-id

        After creating a repo and commited, we can find the filetype or the file with its commit.

Blobs are stored in trees

    Commands

        $ git ls-tree HEAD

            # 100644 blob af5626b4a114abcb82d63db7c8082c3c4756e51b greeting
            
Staging area: 

    Blob: Index

    Bundles and hashes everything in there

Commit: 

    Adds Metadata to staging area and hashes it

        date

        name

        Parent commit

    Points the latest commit as the head of a branch


Rebase:

    Moves a branch base to the end of another branch to make a linear history

    It changes every commit in the branch

    Use rebase in local branches, merge in remote ones

Reset:

    $ git reset --soft hashNumber

        Changes the index to this hash number

    $ git reset --hard hashNumber 

        Go back in time, throwing away changes


Recommendation:

    $ git stash

        Save changes. Recommended every day. Makes a copy in the reflog.

        $ git stash apply

            Brings back stashed changes

    $ git checkout -b new-branch HEAD~3

        Go back in time in a new branch

    // Assuming you are happy with your changes in the new branch

    $ git branch -D master  

        Goodbye old master (still in reflog)

    $ git branch -m new-branch master  

        New-branch is now my master

Reflog:

    Meta-repository that records every change you make to your repository. 

    It persists for 30 days




